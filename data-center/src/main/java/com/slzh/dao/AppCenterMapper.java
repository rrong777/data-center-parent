package com.slzh.dao;

import com.slzh.model.sso.AppCenter;
import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import java.util.Map;

public interface AppCenterMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_register_info
     *
     * @mbggenerated Sat Apr 17 11:06:36 CST 2021
     */
    int deleteByPrimaryKey(Long registerInfoId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_register_info
     *
     * @mbggenerated Sat Apr 17 11:06:36 CST 2021
     */
    int insert(AppCenter record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_register_info
     *
     * @mbggenerated Sat Apr 17 11:06:36 CST 2021
     */
    int insertSelective(AppCenter record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_register_info
     *
     * @mbggenerated Sat Apr 17 11:06:36 CST 2021
     */
    AppCenter selectByPrimaryKey(String registerInfoId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_register_info
     *
     * @mbggenerated Sat Apr 17 11:06:36 CST 2021
     */
    int updateByPrimaryKeySelective(AppCenter appCenter);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_register_info
     *
     * @mbggenerated Sat Apr 17 11:06:36 CST 2021
     */
    int updateByPrimaryKey(AppCenter record);

    AppCenter selectRegisterInfoByLience(@Param("licenseCode") String licenseCode);

    List<AppCenter> listRegisterInfo(@Param("params") Map<String, Object> params);

    // 分页查询查找应用。根据桌面id
    List<AppCenter> findPageByDesktopId(@Param("params") Map<String, Object> params);

    /**
     * 根据桌面id 查找桌面具有的应用id
     *
     * @param targetId
     * @return
     */
    List<String> getAppIdByDesktopId(String targetId);

    List<String> getAppIdByFavoriteId(String targetId);

    void addLabelForApp(@Param("registerInfoId") String registerInfoId, @Param("labelIds") List<Integer> labelIds);

    void deleteLabelForApp(String registerInfoId);

    void addLabel(Map<String, Object> params);

    List<Map<String, Object>> getLabels();

    void deleteLabel(Integer labelId);

    void updateLabel(@Param("labelName") String labelName, @Param("labelId") Integer labelId);

    List<AppCenter> getAppByLabel(Map<String, Object> params);

    List<Map<String, Integer>> getNumsForLabelApp(@Param("appIds") List<String> appIds);

    Integer getCountForHot(@Param("appIds") List<String> appIds);

    Integer getCountForNewest();

    Integer getAllCount(@Param("appIds") List<String> appIds);

    List<AppCenter> getLabelIdsByAppIds(@Param("appIds") List<String> appIds);

    List<AppCenter> getMenuIdsByAppIds(@Param("appIds") List<String> appIds);

    List<AppCenter> listPlate();

    List<Map> getCategoryCount(@Param("keyword") String keyword, @Param("appIdList") List<String> lable);

    List<String> getAppIdByLabel(String label);

    Integer getAppCountByLabel(@Param("label") String label, @Param("keyword") String keyword,@Param("appIds") List<String> appIdList);

    List<String> listAppIdsByRoles(@Param("roles") List<String> rolesNames);

    AppCenter selectRegisterInfoByRegistorId(@Param("registerId") String registerId);

    AppCenter selectRegisterInfoBygetDeveloper(@Param("developer") String developer);

    List<AppCenter> listAllApplicationInfo(@Param("params") Map<String, Object> req);


    List<Map<String,Object>> listLables();

}